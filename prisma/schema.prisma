// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum RegistrationStatus {
  CONFIRMED
  INCOMPLETE
  REMOVED
}

// https://github.com/shy0980/middleman.git
model User {
  id                 String            @id @default(uuid())
  name               String
  email              String            @unique
  password           String // added new
  picture            String?
  mobile             String?
  college            String
  Registration       Registration[]
  technicalSociety   technicalSociety? @relation(fields: [technicalSocietyId], references: [id])
  technicalSocietyId String?
}

model EventCoordinators {
  id                 String           @id @default(uuid())
  name               String
  email              String           @unique
  password           String 
  technicalSociety   technicalSociety @relation(fields: [technicalSocietyId], references: [id])
  technicalSocietyId String
  eventsHandling     Events[]
  EventDoubts        EventDoubts[]
}

model EventDoubts {
  id                  String            @id @default(uuid())
  Question            String
  Event               Events            @relation(fields: [eventsId], references: [id])
  EventCoordinator    EventCoordinators @relation(fields: [eventCoordinatorsId], references: [id])
  eventsId            String
  eventCoordinatorsId String
}

model Events {
  id               String   @id @default(uuid())
  name             String
  venue            String
  longdescription  String
  shortdescription String
  timeline         Json
  startTime        DateTime
  endTime          DateTime
  poster           String
  rules            String[]

  Registration        Registration[]
  eventCategories     eventCategories?   @relation(fields: [eventCategoriesId], references: [id])
  eventCategoriesId   String?
  technicalSociety    technicalSociety?  @relation(fields: [technicalSocietyId], references: [id])
  technicalSocietyId  String?
  EventCoordinators   EventCoordinators? @relation(fields: [eventCoordinatorsId], references: [id])
  eventCoordinatorsId String?
  EventDoubts         EventDoubts[]
}

model Registration {
  id           String             @id @default(uuid())
  user         User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  event        Events             @relation(fields: [eventId], references: [id], onDelete: Cascade)
  userId       String
  eventId      String
  status       RegistrationStatus
  registeredAt DateTime           @default(now())

  @@unique([userId, eventId])
}

model eventCategories {
  id     String   @id @default(uuid())
  type   String
  imgUrl String
  icon   String
  events Events[]
}

model Sponsor {
  id                  String             @id @default(uuid())
  name                String
  imageUrl            String
  sponsorWebsite      String
  sponsorCategories   sponsorCategories? @relation(fields: [sponsorCategoriesId], references: [Id])
  sponsorCategoriesId String?
}

model sponsorCategories {
  Id       String    @id @default(uuid())
  category String
  sponsors Sponsor[]
}

model technicalSociety {
  id                String              @id @default(uuid())
  name              String
  description       String
  imageUrl          String
  socials           Json // socials.json
  event             Events[] // TODO: create a proper FK constraint using @relation decorator
  Announcements     Announcements[]
  EventCoordinators EventCoordinators[]
  User              User[]
}

model Lectures {
  id        String @id @default(uuid())
  name      String
  longdesc  String
  shortdesc String
  imageUrl  String
  timeline  Json // timeline.json
  socials   Json // socials.json
}

model FAQs {
  id       String @id @default(uuid())
  question String
  answer   String
}

model Announcements {
  id                 String           @id @default(uuid())
  content            String
  time               DateTime
  event              String
  technicalSociety   technicalSociety @relation(fields: [technicalSocietyId], references: [id])
  technicalSocietyId String
}
